pm0
q10.f <- function(m, n, a, b, X, alpha, p0){
l <- length(X)
pm0 <- 1
for (i in 1:l){
pm0 <- pm0*dbinom(X[i], size = m, prob = p0)
}
pm1 <- integrate(prob, 0, 1, X=X, m=m, a=a, b=b)
return(pm0/pm1)
}
q10.f(m, n, a, b, X, alpha, p0)
l <- length(X)
pm0 <- 1
for (i in 1:l){
pm0 <- pm0*dbinom(X[i], size = m, prob = p0)
}
pm1 <- integrate(prob, 0, 1, X=X, m=m, a=a, b=b)
pm1
str(pm1)
q10.f <- function(m, n, a, b, X, alpha, p0){
l <- length(X)
pm0 <- 1
for (i in 1:l){
pm0 <- pm0*dbinom(X[i], size = m, prob = p0)
}
pm1 <- integrate(prob, 0, 1, X=X, m=m, a=a, b=b)$value
return(pm0/pm1)
}
q10.f(m, n, a, b, X, alpha, p0)
q10d.f <- function(m, n, a, b, X, alpha, p0){
l <- length(X)
pm0 <- 1
for (i in 1:l){
pm0 <- pm0*dbinom(X[i], size = m, prob = p0)
}
pm1 <- integrate(prob, 0, 1, X=X, m=m, a=a, b=b)$value
return(pm0/pm1)
}
q10a.f <- function(m, n, a, b, X){
ps <- seq(0, 1, length.out = 1000)
plot(ps,
dbeta(ps, shape1 = a+sum(X), shape2 = m*n-sum(X)+b), type = "l",
xlab = "", ylab = "")
lines(ps, dbeta(ps, shape1 = a, shape2 = b), lty = 2)
}
# b).
q10b.f <- function(m, n, a, b, X, alpha){
lb <- qbeta(alpha/2, shape1 = a+sum(X), shape2 = m*n-sum(X)+b)
rb <- qbeta(1-alpha/2, shape1 = a+sum(X), shape2 = m*n-sum(X)+b)
return(c(lb, rb))
}
# c).
q10c.f <- function(m, n, a, b, X, alpha){
T <- 10000
ps <- rbeta(T, shape1 = a+sum(X), shape2 = m*n-sum(X)+b)
if(!require(coda)){
install.packages("coda")
require(coda)
}
return(HPDinterval(as.mcmc(ps), prob=1-alpha))
}
# d).
prob <- function(p, X, m, a, b){
l <- length(X)
pr <- 1
for (i in 1:l){
pr <- pr*dbinom(X[i], size = m, prob = p)
}
pr <- pr*dbeta(p, a, b)
return(pr)
}
q10d.f <- function(m, n, a, b, X, alpha, p0){
l <- length(X)
pm0 <- 1
for (i in 1:l){
pm0 <- pm0*dbinom(X[i], size = m, prob = p0)
}
pm1 <- integrate(prob, 0, 1, X=X, m=m, a=a, b=b)$value
return(pm0/pm1)
}
# e
q10.f <- function(m, n, a, b, X, alpha, p0){
q10a.f(m, n, a, b, X)
b <- q10b.f(m, n, a, b, X, alpha)
c <- q10c.f(m, n, a, b, X, alpha)
d <- q10d.f(m, n, a, b, X, alpha, p0)
return(list(CS=b, HPD=c, BayesFactor=d))
}
n <- 20
m <- 5
X <- rbinom(n = n, size = m, prob = .45)
a <- 2
b <- 2
alpha <- 0.05
p0 <- 1/2
q10.f(m, n, a, b, X, alpha, p0)
n <- 10
m <- 10
X <- rbinom(n = n, size = m, prob = .95)
a <- 1
b <- 1
alpha <- 0.05
p0 <- 1/2
q10.f(m, n, a, b, X, alpha, p0)
n <- 100
m <- 20
X <- rbinom(n = n, size = m, prob = .5)
a <- 2
b <- 1
alpha <- 0.05
p0 <- 1/2
q10.f(m, n, a, b, X, alpha, p0)
n <- 100
m <- 20
X <- rbinom(n = n, size = m, prob = .5)
a <- 2
b <- 1
alpha <- 0.05
p0 <- 1/2
q10.f(m, n, a, b, X, alpha, p0)
# ii
n <- 10
m <- 10
X <- rbinom(n = n, size = m, prob = .95)
a <- 1
b <- 1
alpha <- 0.05
p0 <- 1/2
q10.f(m, n, a, b, X, alpha, p0)
# i
n <- 20
m <- 5
X <- rbinom(n = n, size = m, prob = .45)
a <- 2
b <- 2
alpha <- 0.05
p0 <- 1/2
q10.f(m, n, a, b, X, alpha, p0)
x
X
l <- length(X)
pm0 <- 1
for (i in 1:l){
pm0 <- pm0*dbinom(X[i], size = m, prob = p0)
}
pm0
pm1 <- integrate(prob, 0, 1, X=X, m=m, a=a, b=b)$value
pm1
pm0/pm1
# 10.
# a)
q10a.f <- function(m, n, a, b, X){
ps <- seq(0, 1, length.out = 1000)
plot(ps,
dbeta(ps, shape1 = a+sum(X), shape2 = m*n-sum(X)+b), type = "l",
xlab = "", ylab = "")
lines(ps, dbeta(ps, shape1 = a, shape2 = b), lty = 2)
}
# b).
q10b.f <- function(m, n, a, b, X, alpha){
lb <- qbeta(alpha/2, shape1 = a+sum(X), shape2 = m*n-sum(X)+b)
rb <- qbeta(1-alpha/2, shape1 = a+sum(X), shape2 = m*n-sum(X)+b)
return(c(lb, rb))
}
# c).
q10c.f <- function(m, n, a, b, X, alpha){
T <- 10000
ps <- rbeta(T, shape1 = a+sum(X), shape2 = m*n-sum(X)+b)
if(!require(coda)){
install.packages("coda")
require(coda)
}
return(HPDinterval(as.mcmc(ps), prob=1-alpha))
}
# d).
prob <- function(p, X, m, a, b){
l <- length(X)
pr <- 1
for (i in 1:l){
pr <- pr*dbinom(X[i], size = m, prob = p)
}
pr <- pr*dbeta(p, a, b)
return(pr)
}
q10d.f <- function(m, n, a, b, X, p0){
l <- length(X)
pm0 <- 1
for (i in 1:l){
pm0 <- pm0*dbinom(X[i], size = m, prob = p0)
}
pm1 <- integrate(prob, 0, 1, X=X, m=m, a=a, b=b)$value
return(pm0/pm1)
}
# e
q10.f <- function(m, n, a, b, X, alpha, p0){
q10a.f(m, n, a, b, X)
b <- q10b.f(m, n, a, b, X, alpha)
c <- q10c.f(m, n, a, b, X, alpha)
d <- q10d.f(m, n, a, b, X, p0)
return(list(CS=b, HPD=c, BayesFactor=d))
}
# i
n <- 20
m <- 5
X <- rbinom(n = n, size = m, prob = .45)
a <- 2
b <- 2
alpha <- 0.05
p0 <- 1/2
q10.f(m, n, a, b, X, alpha, p0)
# ii
n <- 10
m <- 10
X <- rbinom(n = n, size = m, prob = .95)
a <- 1
b <- 1
alpha <- 0.05
p0 <- 1/2
q10.f(m, n, a, b, X, alpha, p0)
# iii
n <- 100
m <- 20
X <- rbinom(n = n, size = m, prob = .5)
a <- 2
b <- 1
alpha <- 0.05
p0 <- 1/2
q10.f(m, n, a, b, X, alpha, p0)
require(coda)
require(fff)
tt <- require(fff)
tt
ps <- rbeta(T, shape1 = a+sum(X), shape2 = m*n-sum(X)+b)
ps
as.mcmc(ps)
class(as.mcmc(ps))
draw <- function(mat, main = ""){
image(t(mat)[,ncol(mat):1], axes = FALSE, col = grey(seq(0, 1, length = 256)), main=main)
}
library(RnavGraphImageData)
data(faces)
data.frame(t(faces))
draw(matrix(faces[1, ], nrow = 64))
matrix(faces[1, ], nrow = 64)
d <- data.frame(t(faces))
matrix(d[1, ], nrow = 64)
draw(matrix(d[1, ], nrow = 64))
matrix(d[1, ], nrow = 64)
class(matrix(d[1, ], nrow = 64))
draw(matrix(d[1, ], nrow = 64))
image(matrix(d[1, ], nrow = 64))
mat <- matrix(d[1, ], nrow = 64)
mat
class(mat)
image(t(mat))
draw(matrix(unlist(faces[, 10]), nrow = 64))
draw(matrix(unlist(faces[, ]), nrow = 64))
i=1
draw(matrix(unlist(faces[, i=i+1]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (11)]), nrow = 64))
i=1
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
draw(matrix(unlist(faces[, (i=i+1)]), nrow = 64))
setwd("~/Documents/git/DL")
?h
?sigm
setwd("~/Documents/git/DL")
sigm = function(a){
1/(1+exp(-a))
}
house_train_input <- read.table(file = "./House_inputs_train.dat")
house_train_output <- read.table(file = "./House_output_train.dat")
house_test_input <- read.table(file = "./House_inputs_test.dat")
house_test_output <- read.table(file = "./House_output_test.dat")
house_train_input <- sapply(house_train_input, scale)
house_test_input <- sapply(house_test_input, scale)
sigm <- function(x) 1/(1 + exp(-x))
input = house_train_input
output = house_train_output
x <- t(as.matrix(cbind(int = rep(1, nrow(input)), input)))
y <- t(as.matrix(output))
I <- nrow(x)
J <- nrow(y)
alpha <- matrix(data = runif(size*I, -rang, rang), ncol = nrow(x))
beta <- matrix(data = runif(J*(size+1), -rang, rang), ncol = size+1)
mse_past <- var(as.numeric(y))
size = 10
alpha <- matrix(data = runif(size*I, -rang, rang), ncol = nrow(x))
beta <- matrix(data = runif(J*(size+1), -rang, rang), ncol = size+1)
rang = 0.01
alpha <- matrix(data = runif(size*I, -rang, rang), ncol = nrow(x))
beta <- matrix(data = runif(J*(size+1), -rang, rang), ncol = size+1)
mse_past <- var(as.numeric(y))
ind <- sample(1:ncol(x), m)
z <- sigm(rbind(int = rep(1, ncol(x[, ind])), alpha %*% x[, ind]))
m = round(nrow(input)/3)
ind <- sample(1:ncol(x), m)
# Forward
z <- sigm(rbind(int = rep(1, ncol(x[, ind])), alpha %*% x[, ind]))
y_hat <- beta %*% z
mse <- mean(as.numeric((y[, ind]-y_hat)^2))
if (abs(mse_past - mse) <= tol) break
mse_past <- mse
tol = 1e-4
gamma = 0.1, lambda = 0.1,
maxiter = 100000
beta_update <- -(y[, ind]-y_hat) %*% t(z)/length(y[, ind]) * gamma +
lambda * gamma * c(0, beta[-1])/length(y[, ind])
y[, ind]
dim(y[, ind])
y_hat
y[, ind]-y_hat
(y[, ind]-y_hat) %*% t(z)/length(y[, ind])
lambda * gamma * c(0, beta[-1])/length(y[, ind])
lambda = 0.1
(y[, ind]-y_hat) %*% t(z)/length(y[, ind]) * gamma +
lambda * gamma * c(0, beta[-1])/length(y[, ind])
(y[, ind]-y_hat) %*% t(z)/length(y[, ind]) * gamma
gamma
gamma = 0.1
beta_update <- -(y[, ind]-y_hat) %*% t(z)/length(y[, ind]) * gamma +
lambda * gamma * c(0, beta[-1])/length(y[, ind])
?gamma
?Gamma
?GAMMA
load("~/Documents/git/DL/hw3q1_data.RData")
save(list = c("minst0_train", "minst9_train"), file = "./hw5data.RData")
load("./hw5data.RData")
View(minst0_train)
unlist(minst0_test[1, ])
?runif
?runif
?runif
