installed.packages()
#Get currently installed packages
package_df <- as.data.frame(installed.packages())
package_list <- as.character(package_df$Package)
package_list
save(list = ls(), file = "./packagenames.RData")
installed.packages()
package_df <- as.data.frame(installed.packages())
installed.packages()
package_list <- as.character(package_df$Package)
update.packages()
install.packages(package_list)
install.packages(package_list)
install.packages(package_list)
install.packages(package_list)
install.packages(package_list)
update.packages()
install.packages("kernlab")
qt(0.975, 1)
x <- seq(-20, 20, length.out = 1000)
plot(x, dnorm(x))
lines(x, dt(x, 1))
qt(0.975, 3)
pnorm(1)-pnorm(-1)
pt(3, 3)-pt(-3, 3)
?abline
0.05^2/0.2976187
sqrt(0.05^2/0.2976187)
so $w=\sqrt{0.05^2/0.2976187}=`r round(sqrt(0.05^2/0.2976187),2)`$
0.65^2*0.05^+0.35^2*0.07^2
sqrt(0.65^2*0.05^+0.35^2*0.07^2)
x <- seq(0, 1, 0.01)
plot(x, x^2*0.05^+(1-x)^2*0.07^2)
plot(x, x^2*0.05^2+(1-x)^2*0.07^2)
which.min(x^2*0.05^2+(1-x)^2*0.07^2)
(0.08*0.15^2)/(0.08*0.15^2+0.02*0.2^2)
1-(0.08*0.15^2)/(0.08*0.15^2+0.02*0.2^2)
w1 <- 1-(0.08*0.15^2)/(0.08*0.15^2+0.02*0.2^2)
w2 <- 1-(0.08*0.15^2)/(0.08*0.15^2+0.02*0.2^2)
w1=1-w2
w1*0.14+w2*0.08
w1*0.14+w2*0.08-0.06
sqrt(w1^2*0.2^2+w2^2*0.15^2)
w=(1-0.06)/0.062
w
w=(0.1-0.06)/0.062
w
w* sqrt(w1^2*0.2^2+w2^2*0.15^2)
sqrt(0.65^2*0.05^2+0.35^2*0.07^2)
choose(4,2)
0.6^3+3*0.4*0.6^3+choose(4,2)*0.4^2*0.6^3+0.4^3+3*0.6*0.4^3+choose(4,2)*0.6^2*0.4^3
(0.0074-0.005)/(0.0074-0.0032)
mu <- matrix(c(0.001, 0.0015))
mu
w <- matrix(c((100*200)/(100* 200+125*100), 1-(100*200)/(100* 200+125*100)))
s <- matrix(c(0.03^2, 0.35*0.03*0.04, 0.35*0.03*0.04, 0.04^2), nrow = 2)
mu <- matrix(c(0.001, 0.0015))
update.packages()
install.packages("glmnet")
library(testthat)
?"testthat-package"
x <- sample(1:7, 100, replace = TRUE)
table(x)
mode(x)
?quantile
install.packages("PerformanceAnalytics")
update.packages()
update.packages()
update.packages()
install.packages("time")
library(mnormt)
version
pbinom(1, 2, 0.5)
pbinom(2, 2, 0.5)
dbinom(1, 2, 0.5)
dbinom(5000, 10000, 0.5)
pbinom(5000, 10000, 0.5)
library(animation)
install.packages("animation")
library(animation)
?clt.ani
clt.ani()
library()
update.packages()
update.packages()
update.packages()
?upper.tri
matrix(rnorm(100), nrow = 10)
x <- matrix(rnorm(100), nrow = 10)
upper.tri()
upper.tri(x)
which(upper.tri(x))
setwd("~/Documents/git/DL")
load("./hw4results.RData")
sapply(results, "[", 2)
sapply(results, "[", 3)
sapply(results, "[", 4)
sapply(results, "[", 5)
sapply(results, "[", 100)
sapply(results, "[", 200)
sapply(results[9:16], "[", 200)
sapply(results[9:16], "[", 100)
sapply(results[1:8], "[", 200)
params
knit_with_parameters('~/Documents/git/DL/hw4.Rmd')
# Chunk 1: setup
load("./hw4results.RData")
library('knitr')
# Chunk 1: setup
load("./hw4results.RData")
library('knitr')
table_1 <- cbind(params, mse = c(sapply(results[1:8], "[", 200),
sapply(results[9:16], "[", 100)))
table_1
?ktable
library(knitr)
?ktable
?kable
load("./hw4q1bcdresults.RData")
plot(results[[1]], type = "l")
plot(results[[1]], type = "l", xlab = "epoch", ylab = "MSE", main =  "MSE by epoch")
w
dim(w)
matrix(w[1, ], nrow = 28)
heatmap(matrix(w[1, ], nrow = 28))
heatmap(matrix(w[1, ], nrow = 28), Rowv = FALSE)
heatmap(matrix(w[1, ], nrow = 28), Rowv = FALSE, Colv = FALSE)
image(matrix(w[1, ], nrow = 28))
draw <- function(mat, main = ""){
image(t(mat)[,ncol(mat):1], axes = FALSE, col = grey(seq(0, 1, length = 256)), main=main)
}
draw(matrix(w[1, ], nrow = 28))
draw <- function(mat, main = ""){
image(t(mat)[,ncol(mat):1], axes = FALSE, main=main)
}
draw(matrix(w[1, ], nrow = 28))
opar <- par("mfrow")
opar
draw <- function(mat, main = ""){
image(t(mat)[,ncol(mat):1], axes = FALSE, main=main)
}
par(mfrow = c(5, 4))
for (i in 1:20){
draw(matrix(w[i, ], nrow = 28))
}
opar <- par("mar")
opar
draw <- function(mat, main = ""){
image(t(mat)[,ncol(mat):1], axes = FALSE, main=main)
}
par(mfrow = c(5, 4), mar = c(1, 1, 1, 1))
for (i in 1:20){
draw(matrix(w[i, ], nrow = 28))
}
?image
draw <- function(mat, main = ""){
image(t(mat)[,ncol(mat):1], axes = FALSE, col = rainbow(12), main=main)
}
par(mfrow = c(5, 4), mar = c(1, 1, 1, 1))
for (i in 1:20){
draw(matrix(w[i, ], nrow = 28))
}
draw <- function(mat, main = ""){
image(t(mat)[,ncol(mat):1], axes = FALSE, col = terrain.colors(12), main=main)
}
par(mfrow = c(5, 4), mar = c(1, 1, 1, 1))
for (i in 1:20){
draw(matrix(w[i, ], nrow = 28))
}
draw <- function(mat, main = ""){
image(t(mat)[,ncol(mat):1], axes = FALSE, col = topo.colors(12), main=main)
}
par(mfrow = c(5, 4), mar = c(1, 1, 1, 1))
for (i in 1:20){
draw(matrix(w[i, ], nrow = 28))
}
draw <- function(mat, main = ""){
image(t(mat)[,ncol(mat):1], axes = FALSE, col = cm.colors(12), main=main)
}
par(mfrow = c(5, 4), mar = c(1, 1, 1, 1))
for (i in 1:20){
draw(matrix(w[i, ], nrow = 28))
}
draw <- function(mat, main = ""){
image(t(mat)[,ncol(mat):1], axes = FALSE, col = rainbow(8), main=main)
}
par(mfrow = c(5, 4), mar = c(1, 1, 1, 1))
for (i in 1:20){
draw(matrix(w[i, ], nrow = 28))
}
draw <- function(mat, main = ""){
image(t(mat)[,ncol(mat):1], axes = FALSE, col = rainbow(20), main=main)
}
par(mfrow = c(5, 4), mar = c(1, 1, 1, 1))
for (i in 1:20){
draw(matrix(w[i, ], nrow = 28))
}
draw <- function(mat, main = ""){
image(t(mat)[,ncol(mat):1], axes = FALSE, col = rainbow(50), main=main)
}
par(mfrow = c(5, 4), mar = c(1, 1, 1, 1))
for (i in 1:20){
draw(matrix(w[i, ], nrow = 28))
}
draw <- function(mat, main = ""){
image(t(mat)[,ncol(mat):1], axes = FALSE, col = rainbow(50), main=main)
}
par(mfrow = c(5, 4), mar = c(1, 1, 1, 1))
for (i in 1:20){
draw(matrix(w[i, ], nrow = 28))
}
draw <- function(mat, main = ""){
image(t(mat)[,ncol(mat):1], axes = FALSE, col = rainbow(50), main=main)
}
par(mfrow = c(5, 4), mar = c(1, 1, 1, 1))
for (i in 1:20){
draw(matrix(w[i, ], nrow = 28))
}
draw <- function(mat, main = ""){
image(t(mat)[,ncol(mat):1], axes = FALSE, col = rainbow(50), main=main)
}
par(mfrow = c(5, 4), mar = c(1, 1, 1, 1))
for (i in 1:20){
draw(matrix(w[i, ], nrow = 28))
}
draw <- function(mat, main = ""){
image(t(mat)[,ncol(mat):1], axes = FALSE, col = rainbow(50), main=main)
}
par(mfrow = c(5, 4), mar = c(1, 1, 1, 1))
for (i in 1:20){
draw(matrix(w[i, ], nrow = 28))
}
draw <- function(mat, main = ""){
image(t(mat)[,ncol(mat):1], axes = FALSE, col = rainbow(50), main=main)
}
par(mfrow = c(5, 4), mar = c(1, 1, 1, 1))
for (i in 1:20){
draw(matrix(w[i, ], nrow = 28))
}
draw <- function(mat, main = ""){
image(t(mat)[,ncol(mat):1], axes = FALSE, col = rainbow(50), main=main)
}
par(mfrow = c(5, 4), mar = c(1, 1, 1, 1))
for (i in 1:20){
draw(matrix(w[i, ], nrow = 28))
}
matrix(w[19, ], nrow = 28)
min(matrix(w[i, ], nrow = 28))
draw <- function(mat, main = ""){
image(t(mat)[,ncol(mat):1], axes = FALSE, col = rainbow(50, start = -2), main=main)
}
par(mfrow = c(5, 4), mar = c(1, 1, 1, 1))
for (i in 1:20){
draw(matrix(w[i, ], nrow = 28))
}
draw <- function(mat, main = ""){
image(t(mat)[,ncol(mat):1], axes = FALSE, col = rainbow(50), main=main)
}
par(mfrow = c(5, 4), mar = c(1, 1, 1, 1))
for (i in 1:20){
draw(matrix(scale(w[i, ]), nrow = 28))
}
draw <- function(mat, main = ""){
image(t(mat)[,ncol(mat):1], axes = FALSE, col = rainbow(50), main=main)
}
par(mfrow = c(5, 4), mar = c(1, 1, 1, 1))
for (i in 1:20){
draw(matrix(scale(w[i, ]), nrow = 28))
}
scale(w[1,])
?scale
min(scale(w[1,]))
w
min(w)
draw <- function(mat, main = ""){
image(t(mat)[,ncol(mat):1], axes = FALSE, col = rainbow(50), main=main)
}
par(mfrow = c(5, 4), mar = c(1, 1, 1, 1))
for (i in 1:20){
draw(matrix(w[i, ] + 3, nrow = 28))
}
w[i, ] + 3
draw(matrix(w[19, ] + 3, nrow = 28))
draw(matrix(w[19, ] + 1, nrow = 28))
draw <- function(mat, main = ""){
image(t(mat)[,ncol(mat):1], axes = FALSE, col = rainbow(50), main=main)
}
par(mfrow = c(5, 4), mar = c(1, 1, 1, 1))
for (i in 1:20){
draw(matrix(w[i, ], nrow = 28))
}
test.id <- sample(1:nrow(minstbw_train), 20)
test.id
testsample <- minstbw_train[test.id, ]
test.id <- sample(1:nrow(minstbw_train), 20)
testsample <- minstbw_train[test.id, ]
for (i in 1:20){
draw(matrix(testsample[i, ], nrow = 28))
}
testsample[i, ]
test.id <- sample(1:nrow(minstbw_train), 20)
testsample <- minstbw_train[test.id, ]
for (i in 1:20){
draw(matrix(unlist(testsample[i, ]), nrow = 28))
}
test.id <- sample(1:nrow(minstbw_train), 20)
testsample <- minstbw_train[test.id, ]
draw <- function(mat, main = ""){
image(t(mat)[,ncol(mat):1], axes = FALSE, col = col = grey(seq(0, 1, length = 256)), main=main)
}
for (i in 1:20){
draw(matrix(unlist(testsample[i, ]), nrow = 28))
}
test.id <- sample(1:nrow(minstbw_train), 20)
testsample <- minstbw_train[test.id, ]
draw <- function(mat, main = ""){
image(t(mat)[,ncol(mat):1], axes = FALSE, col = grey(seq(0, 1, length = 256)), main=main)
}
for (i in 1:20){
draw(matrix(unlist(testsample[i, ]), nrow = 28))
}
test.id <- sample(1:nrow(minstbw_train), 20)
testsample <- minstbw_train[test.id, ]
draw <- function(mat, main = ""){
image(t(mat)[,ncol(mat):1], axes = FALSE, col = grey(seq(0, 1, length = 256)), main=main)
}
for (i in 1:20){
draw(t(matrix(unlist(testsample[i, ]), nrow = 28)))
}
test.id <- sample(1:nrow(minstbw_train), 20)
testsample <- minstbw_train[test.id, ]
draw <- function(mat, main = ""){
image(t(mat)[,ncol(mat):1], axes = FALSE, col = grey(seq(0, 1, length = 256)), main=main)
}
for (i in 1:20){
draw(t(matrix(unlist(testsample[i, ]), nrow = 28)))
}
test.id <- sample(1:nrow(minstbw_train), 20)
testsample <- minstbw_train[test.id, ]
draw <- function(mat, main = ""){
image(t(mat)[,ncol(mat):1], axes = FALSE, col = grey(seq(0, 1, length = 256)), main=main)
}
for (i in 1:20){
draw(t(matrix(unlist(testsample[i, ]), nrow = 28)))
}
test.id <- sample(1:nrow(minstbw_train), 20)
testsample <- minstbw_train[test.id, ]
draw <- function(mat, main = ""){
image(t(mat)[,ncol(mat):1], axes = FALSE, col = grey(seq(0, 1, length = 256)), main=main)
}
for (i in 1:20){
draw(t(matrix(unlist(testsample[i, ]), nrow = 28)))
}
28**2
flip.ind <- sample(1:784, round(784*0.15))
flip.ind
i=1
noisesample <- testsample
noisesample[i, flip.ind] <- 1 - noisesample[i, flip.ind]
predictsample <- noisesample <- testsample
predictsample <- noisesample <- testsample
i
flip.ind <- sample(1:784, round(784*0.15))
noisesample[i, flip.ind] <- 1 - noisesample[i, flip.ind]
v <- unlist(noisesample[i, ])
h <- 1/(1 + exp(-(w %*% v + c)))
hs <- ifelse(h > 0.5, 1, 0)
vr <- 1/(1 + exp(-(t(w) %*% hs + b)))
predictsample[i, ] <- ifelse(vr > 0.5, 1, 0)
predictsample
draw(t(matrix(unlist(predictsample[i, ]), nrow = 28)))
# Chunk 1: setup
load("./hw4results.RData")
library('knitr')
# Chunk 2
table_1 <- cbind(params, mse = c(sapply(results[1:8], "[", 200),
sapply(results[9:16], "[", 100)),
time = dur_time)
kable(table_1, format = "markdown")
# Chunk 3
load("./hw4q1bcdresults.RData")
# Chunk 4
plot(results[[1]], type = "l", xlab = "epoch", ylab = "MSE", main =  "MSE by epoch")
# Chunk 5
draw <- function(mat, main = ""){
image(t(mat)[,ncol(mat):1], axes = FALSE, col = rainbow(50), main=main)
}
par(mfrow = c(5, 4), mar = c(1, 1, 1, 1))
for (i in 1:20){
draw(matrix(w[i, ], nrow = 28))
}
test.id <- sample(1:nrow(minstbw_train), 20)
testsample <- minstbw_train[test.id, ]
# draw <- function(mat, main = ""){
#         image(t(mat)[,ncol(mat):1], axes = FALSE, col = grey(seq(0, 1, length = 256)), main=main)
# }
for (i in 1:20){
draw(t(matrix(unlist(testsample[i, ]), nrow = 28)))
}
predictsample <- noisesample <- testsample
for (i in 1:20){
flip.ind <- sample(1:784, round(784*0.15))
noisesample[i, flip.ind] <- 1 - noisesample[i, flip.ind]
v <- unlist(noisesample[i, ])
h <- 1/(1 + exp(-(w %*% v + c)))
hs <- ifelse(h > 0.5, 1, 0)
vr <- 1/(1 + exp(-(t(w) %*% hs + b)))
predictsample[i, ] <- ifelse(vr > 0.5, 1, 0)
}
draw <- function(mat, main = ""){
image(t(mat)[,ncol(mat):1], axes = FALSE, col = rainbow(seq(0, 1, length = 256)), main=main)
}
par(mfrow = c(5, 4), mar = c(1, 1, 1, 1))
for (i in 1:20){
draw(matrix(w[i, ], nrow = 28))
}
# Chunk 1: setup
load("./hw4results.RData")
library('knitr')
# Chunk 2
table_1 <- cbind(params, mse = c(sapply(results[1:8], "[", 200),
sapply(results[9:16], "[", 100)),
time = dur_time)
kable(table_1, format = "markdown")
# Chunk 3
load("./hw4q1bcdresults.RData")
# Chunk 4
plot(results[[1]], type = "l", xlab = "epoch", ylab = "MSE", main =  "MSE by epoch")
# Chunk 5
draw <- function(mat, main = ""){
image(t(mat)[,ncol(mat):1], axes = FALSE, col = rainbow(50), main=main)
}
par(mfrow = c(5, 4), mar = c(1, 1, 1, 1))
for (i in 1:20){
draw(matrix(w[i, ], nrow = 28))
}
test.id <- sample(1:nrow(minstbw_train), 20)
testsample <- minstbw_train[test.id, ]
draw <- function(mat, main = ""){
image(t(mat)[,ncol(mat):1], axes = FALSE, col = grey(seq(0, 1, length = 256)), main=main)
}
for (i in 1:20){
draw(t(matrix(unlist(testsample[i, ]), nrow = 28)))
}
predictsample <- noisesample <- testsample
for (i in 1:20){
flip.ind <- sample(1:784, round(784*0.15))
noisesample[i, flip.ind] <- 1 - noisesample[i, flip.ind]
v <- unlist(noisesample[i, ])
h <- 1/(1 + exp(-(w %*% v + c)))
hs <- ifelse(h > 0.5, 1, 0)
vr <- 1/(1 + exp(-(t(w) %*% hs + b)))
predictsample[i, ] <- ifelse(vr > 0.5, 1, 0)
}
test.id <- sample(1:nrow(minstbw_train), 20)
testsample <- minstbw_train[test.id, ]
draw <- function(mat, main = ""){
image(t(mat)[,ncol(mat):1], axes = FALSE, col = grey(seq(0, 1, length = 256)), main=main)
}
for (i in 1:20){
draw(t(matrix(unlist(testsample[i, ]), nrow = 28)))
}
predictsample <- noisesample <- testsample
for (i in 1:20){
flip.ind <- sample(1:784, round(784*0.15))
noisesample[i, flip.ind] <- 1 - noisesample[i, flip.ind]
v <- unlist(noisesample[i, ])
h <- 1/(1 + exp(-(w %*% v + c)))
hs <- ifelse(h > 0.5, 1, 0)
vr <- 1/(1 + exp(-(t(w) %*% hs + b)))
predictsample[i, ] <- vr
draw(t(matrix(unlist(predictsample[i, ]), nrow = 28)))
}
test.id <- sample(1:nrow(minstbw_train), 20)
testsample <- minstbw_train[test.id, ]
draw <- function(mat, main = ""){
image(t(mat)[,ncol(mat):1], axes = FALSE, col = grey(seq(0, 1, length = 256)), main=main)
}
for (i in 1:20){
draw(t(matrix(unlist(testsample[i, ]), nrow = 28)))
}
predictsample <- noisesample <- testsample
for (i in 1:20){
flip.ind <- sample(1:784, round(784*0.15))
noisesample[i, flip.ind] <- 1 - noisesample[i, flip.ind]
draw(t(matrix(unlist(noisesample[i, ]), nrow = 28)))
v <- unlist(noisesample[i, ])
h <- 1/(1 + exp(-(w %*% v + c)))
hs <- ifelse(h > 0.5, 1, 0)
vr <- 1/(1 + exp(-(t(w) %*% hs + b)))
predictsample[i, ] <- vr
draw(t(matrix(unlist(predictsample[i, ]), nrow = 28)))
}
test.id <- sample(1:nrow(minstbw_train), 20)
testsample <- minstbw_train[test.id, ]
draw <- function(mat, main = ""){
image(t(mat)[,ncol(mat):1], axes = FALSE, col = grey(seq(0, 1, length = 256)), main=main)
}
for (i in 1:20){
draw(t(matrix(unlist(testsample[i, ]), nrow = 28)))
}
predictsample <- noisesample <- testsample
for (i in 1:20){
flip.ind <- sample(1:784, round(784*0.15))
noisesample[i, flip.ind] <- 1 - noisesample[i, flip.ind]
v <- unlist(noisesample[i, ])
h <- 1/(1 + exp(-(w %*% v + c)))
hs <- ifelse(h > 0.5, 1, 0)
vr <- 1/(1 + exp(-(t(w) %*% hs + b)))
predictsample[i, ] <- ifelse(vr > 0.5, 1, 0)
draw(t(matrix(unlist(predictsample[i, ]), nrow = 28)))
}
