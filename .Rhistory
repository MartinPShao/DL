p_mu <- ggplot(data = NULL, mapping = aes(x = sims[501:1000, 1, 9]))
p_mu + geom_histogram() + stat_density()
p_mu +stat_density()
?stat_density
p_mu + geom_histogram() + stat_density(geom = "lines")
p_mu + stat_density(geom = "line")
?geom_histogram
p_mu + geom_histogram(mapping = aes(y = ..count../sum(..count..))) + stat_density(geom = "line")
?stat_density
p_mu <- ggplot(data = NULL, mapping = aes(x = sims[501:1000, 1, 9]))
p_mu + geom_histogram(mapping = aes(y = ..count../sum(..count..)),
alpha = 0.2,
fill = "blue") +
stat_density(geom = "line")
p_mu <- ggplot(data = NULL, mapping = aes(x = sims[501:1000, 1, 9]))
p_mu + geom_histogram(mapping = aes(y = ..count../sum(..count..)),
alpha = 0.2,
fill = "blue") +
stat_density(geom = "line",
fill = "red")
p_mu <- ggplot(data = NULL, mapping = aes(x = sims[501:1000, 1, 9]))
p_mu + geom_histogram(mapping = aes(y = ..count../sum(..count..)),
alpha = 0.2,
fill = "blue") +
stat_density(geom = "line",
colour = "red")
p_mu <- ggplot(data = NULL, mapping = aes(x = sims[501:1000, 1, 9]))
p_mu + geom_histogram(mapping = aes(y = ..count../sum(..count..)),
alpha = 0.2,
fill = "blue") +
stat_density(geom = "line",
size = 2)
p_mu <- ggplot(data = NULL, mapping = aes(x = sims[501:1000, 1, 9]))
p_mu + geom_histogram(mapping = aes(y = ..count../sum(..count..)),
alpha = 0.2,
fill = "blue") +
stat_density(geom = "line",
size = 1)
mu <- seq(-10, 30, length = 5000)
dens <- dnorm(mu, mean = 7.8, sd = 5.3)
p_mu <- ggplot(data = NULL, mapping = aes(x = sims[501:1000, 1, 9]))
p_mu + geom_histogram(mapping = aes(y = ..count../sum(..count..)),
alpha = 0.2,
fill = "blue") +
geom_line(mapping = aes(x = mu, y = dens))
plot(mu, dens)
dnorm(7.8, 7.8, 5.3)
?geom_line
mu <- seq(-10, 30, length = 5000)
dens <- dnorm(mu, mean = 7.8, sd = 5.3)
p_mu <- ggplot(data = NULL, mapping = aes(x = sims[501:1000, 1, 9]))
p_mu + geom_histogram(mapping = aes(y = .5 * ..count../sum(..count..)),
alpha = 0.2,
fill = "blue") +
geom_line(mapping = aes(x = mu, y = dens)) +
labs(list(x = "Mu", y = "Density", title = "Estimate Posterior Distribution"))
mu <- seq(-10, 30, length = 5000)
dens <- dnorm(mu, mean = 7.8, sd = 5.3)
p_mu <- ggplot(data = NULL, mapping = aes(x = sims[501:1000, 1, 9]))
p_mu + geom_histogram(mapping = aes(y = .6 * ..count../sum(..count..)),
alpha = 0.2,
fill = "blue",
binwidth = 1) +
geom_line(mapping = aes(x = mu, y = dens)) +
labs(list(x = "Mu", y = "Density", title = "Estimate Posterior Distribution"))
mu <- seq(-10, 30, length = 5000)
dens <- dnorm(mu, mean = 7.8, sd = 5.3)
p_mu <- ggplot(data = NULL, mapping = aes(x = sims[501:1000, 1, 9]))
p_mu + geom_histogram(mapping = aes(y = .8 * ..count../sum(..count..)),
alpha = 0.2,
fill = "blue",
binwidth = 1) +
geom_line(mapping = aes(x = mu, y = dens)) +
labs(list(x = "Mu", y = "Density", title = "Estimate Posterior Distribution"))
sapply(sims[501:1000, 1, 2:8], max)
apply(sims[501:1000, 1, 2:8], 1, max)
(sims[501:1000, 1, 1] - apply(sims[501:1000, 1, 2:8], 1, max))
mean((sims[501:1000, 1, 1] - apply(sims[501:1000, 1, 2:8], 1, max)) > 0)
install.packages("ff")
getwd()
output <- matrix(numeric(1000*50), ncol = 50)
for (i in 1:1000){
output(i, ) <- sample(1:6, 50, replace = TRUE)
}
for (i in 1:1000){
output(i, ) <- sample(1:6, 50, replace = TRUE)
}
for (i in 1:1000){
output[i, ] <- sample(1:6, 50, replace = TRUE)
}
output
mu <- apply(output, 1, mean)
mu
mean(mu)
sd(mu)
35/12
35/12/50
sqrt(35/12/50)
quantile(mu, probs = c(.025, .975))
mean(mu)-1.96*sqrt(35/12/50)
mean(mu)+1.96*sqrt(35/12/50)
install.packages("rjags")
update.packages()
a <- c(1,2,3,4,6)
b <- c(3,4,5,6,7)
a in b
3 in b
?in
?intersect
intersect(a, b)
load("~/Documents/git/D3_proj1/test_with_response.RData")
hist(test3$shares)
class <- ifesle(test3$shares<=1100, "low", ifelse(test3$shares>2100,"high", "middle"))
class <- ifelse(test3$shares<=1100, "low", ifelse(test3$shares>2100,"high", "middle"))
class
hist(class)
factor(class)
hist(class)
as.numeric(class)
class <- ifelse(test3$shares<=1100, "1", ifelse(test3$shares>2100,"3", "2"))
hist(class)
class <- ifelse(test3$shares<=1100, 1, ifelse(test3$shares>2100,3, 2))
hist(class)
barplot(class)
load("~/Documents/git/D3_proj1/news_raw.RData")
princomp(news_raw[, -59])
pp <- princomp(news_raw[, -59])
summary(pp)
pp <- princomp(news_raw[, -59], scale = TRUE)
summary(pp)
install.packages("dygraph")
install.packages("dygraphs")
install.packages("rjags")
x <- c(0, 1, 3)
x <- x - mean(x)
x
sum(x^2)
sum(x^2)*3
x^2
x^2*3
x^2*9
3*14
14/42
15/42
1+1/3+1/42
(1+1/3+1/42)*14
38/7
sqrt(0.7)
dnorm(.8366)
dnorm(-.8366)
?dnorm
pnorm(.8366)
pnorm(.8366)-pnorm(-0.8366)
2*pnorm(.8366)-1
119.01*2
110.01*2
61.83*2
7.236*4
0.0602*27
220.02+123.66+28.944+1.6254
220.02+123.66+28.944
372.624/8
sqrt(0.0602/4)
qt(0.95,27)
qt(-0.95,27)
?qt
qt(0.05,27)
qt(-0.95,27)
qt(0.95,27)
4.600-2.475
2.125-1.7*.1227
2.125+1.7*.1227
qt(0.99,27)
qchisq(0.95,4)
qnorm(.075)
qnorm(.975)
x=c(.23, .47, .70, 1.00, 1.40, 2)
x
y=c(7.31, 7.47, 6.55, 3.6, 1.54, .8)
y
f=7.6/(1+exp(4.5*(x-1)))
f
F1=7.6*(x-1)*e((x-1)*4.5)/(1+e^(4.5*(x-1))^2
F1=7.6*(x-1)*e((x-1)*4.5)/(1+e^(4.5*(x-1)))^2
F1=7.6*(x-1)*exp((x-1)*4.5)/(1+exp(4.5*(x-1)))^2
F1
F1=-7.6*(x-1)*exp((x-1)*4.5)/(1+exp(4.5*(x-1)))^2
F2=7.6*4.5*exp(4.5*(x-1))/(1+exp(4.5*(x-1)))^2
F2
FF=cbind(F1,F2)
?F
FF
solve(t(FF)%*%FF)
FF_1 <- solve(t(FF)%*%FF)
FF_1
matrix(y)
matrix(f)
FF_1%*%t(FF)%*%(matrix(y-f))
delta <- FF_1%*%t(FF)%*%(matrix(y-f))
4.5+delta[1]
1+delta[2]
sum((y-f)^2)
sqrt(1.296/4)
1-qt(0.975,4)*0.56921*sqrt(3.33^2*0.00804)
1+qt(0.975,4)*0.56921*sqrt(3.33^2*0.00804)
#Get currently installed packages
package_df <- as.data.frame(installed.packages("/Library/Frameworks/R.framework/Versions/2.15/Resources/library"))
package_list <- as.character(package_df$Package)
package_df
installed.packages()
#Get currently installed packages
package_df <- as.data.frame(installed.packages())
package_list <- as.character(package_df$Package)
package_list
save(list = ls(), file = "./packagenames.RData")
installed.packages()
package_df <- as.data.frame(installed.packages())
installed.packages()
package_list <- as.character(package_df$Package)
update.packages()
install.packages(package_list)
install.packages(package_list)
install.packages(package_list)
install.packages(package_list)
install.packages(package_list)
update.packages()
install.packages("kernlab")
qt(0.975, 1)
x <- seq(-20, 20, length.out = 1000)
plot(x, dnorm(x))
lines(x, dt(x, 1))
qt(0.975, 3)
pnorm(1)-pnorm(-1)
pt(3, 3)-pt(-3, 3)
?abline
0.05^2/0.2976187
sqrt(0.05^2/0.2976187)
so $w=\sqrt{0.05^2/0.2976187}=`r round(sqrt(0.05^2/0.2976187),2)`$
0.65^2*0.05^+0.35^2*0.07^2
sqrt(0.65^2*0.05^+0.35^2*0.07^2)
x <- seq(0, 1, 0.01)
plot(x, x^2*0.05^+(1-x)^2*0.07^2)
plot(x, x^2*0.05^2+(1-x)^2*0.07^2)
which.min(x^2*0.05^2+(1-x)^2*0.07^2)
(0.08*0.15^2)/(0.08*0.15^2+0.02*0.2^2)
1-(0.08*0.15^2)/(0.08*0.15^2+0.02*0.2^2)
w1 <- 1-(0.08*0.15^2)/(0.08*0.15^2+0.02*0.2^2)
w2 <- 1-(0.08*0.15^2)/(0.08*0.15^2+0.02*0.2^2)
w1=1-w2
w1*0.14+w2*0.08
w1*0.14+w2*0.08-0.06
sqrt(w1^2*0.2^2+w2^2*0.15^2)
w=(1-0.06)/0.062
w
w=(0.1-0.06)/0.062
w
w* sqrt(w1^2*0.2^2+w2^2*0.15^2)
sqrt(0.65^2*0.05^2+0.35^2*0.07^2)
choose(4,2)
0.6^3+3*0.4*0.6^3+choose(4,2)*0.4^2*0.6^3+0.4^3+3*0.6*0.4^3+choose(4,2)*0.6^2*0.4^3
(0.0074-0.005)/(0.0074-0.0032)
mu <- matrix(c(0.001, 0.0015))
mu
w <- matrix(c((100*200)/(100* 200+125*100), 1-(100*200)/(100* 200+125*100)))
s <- matrix(c(0.03^2, 0.35*0.03*0.04, 0.35*0.03*0.04, 0.04^2), nrow = 2)
mu <- matrix(c(0.001, 0.0015))
setwd("~/Documents/git/DL")
setwd("~/Documents/git/DL")
minst9bw_train <- read.table(file = "./minst9bw_train.dat")
minst0bw_train <- read.table(file = "./minst0bw_train.dat")
save(list = ls(), file = "./hw2datatsets.RData")
minstbw_train <- rbind(minst9bw_train, minst0bw_train)
save(list = ls(), file = "./hw2datatsets.RData")
load(file = "./hw2datatsets.RData")
rm(list = ls())
load(file = "./hw2datatsets.RData")
params <- expand.grid(batch_size, n, eta, niter)
batch_size <- c(1000)
m <- 784
n <- c(20)
eta <- c(0.01)
niter <- c(1)
params <- expand.grid(batch_size, n, eta, niter)
params
class(params)
names(params) <- c("batch_size", "n", "eta", "iter")
params
K <- nrow(params)
params[1, ]$niter
params[1, ]
names(params) <- c("batch_size", "n", "eta", "niter")
params[1, ]
params[1, ]$niter
params[1, "niter"]
?sample
1:nrow(minstbw_train)
max(1:nrow(minstbw_train))
k=1
sample(1:nrow(minstbw_train),
params[k, "batch_size"])
unique(sample(1:nrow(minstbw_train),
params[k, "batch_size"]))
i=1
minstbw_train[sample.ind[i], ]
sample.ind <- sample(1:nrow(minstbw_train),
params[k, "batch_size"])
minstbw_train[sample.ind[i], ]
minstbw_train[sample.ind[i], ]
class(v)
class(minstbw_train[sample.ind[i], ])
class(unlist(minstbw_train[sample.ind[i], ]))
dur_time <- numeric(K)
w0 <- matrix(runif(m*n, -0.1, 0.1), rnow = n, ncol = m)
w0 <- matrix(runif(m*n, -0.1, 0.1), nrow = n, ncol = m)
w0
w0 <- matrix(runif(m*n, -0.1, 0.1), nrow = n, ncol = m)
b0 <- matrix(runif(m*1, -0.1, 0.1), nrow = m, ncol = 1)
c0 <- matrix(runif(n*1, -0.1, 0.1), nrow = n, ncol = 1)
b0
v <- unlist(minstbw_train[sample.ind[i], ])
1/(1 + exp(-(w %*% v + c)))
w <- w0
b <- b0
c <- c0
1/(1 + exp(-(w %*% v + c)))
hs <- ifelse(h > 0.5, 1, 0)
h <- 1/(1 + exp(-(w %*% v + c)))
hs <- ifelse(h > 0.5, 1, 0)
hs
hs <- ifelse(h > 0.5, 1, 0)
vr <- 1/(1 + exp(-(t(w) %*% hs + b)))
vr
h
v
class(v)
vr
hr
hr <- 1/(1 + exp(-(w %*% vr + c)))
hr
dim(w)
h*t(v)
h%*%*t(v)
h%*%t(v)
dim(h%*%t(v))
err <- numeric(params[k, "niter"])
batch_size <- c(1000)
m <- 784
n <- c(20)
eta <- c(0.01)
niter <- c(1)
params <- expand.grid(batch_size, n, eta, niter)
names(params) <- c("batch_size", "n", "eta", "niter")
K <- nrow(params)
results <- list()
dur_time <- numeric(K)
w0 <- matrix(runif(m*n, -0.1, 0.1), nrow = n, ncol = m)
b0 <- matrix(runif(m*1, -0.1, 0.1), nrow = m, ncol = 1)
c0 <- matrix(runif(n*1, -0.1, 0.1), nrow = n, ncol = 1)
for (k in 1:K){
w <- w0
b <- b0
c <- c0
starting <- Sys.time()
for (t in 1:params[k, "niter"]){
sample.ind <- sample(1:nrow(minstbw_train),
params[k, "batch_size"])
err <- numeric(params[k, "niter"])
for (i in 1:params[1, "batch_size"]){
v <- unlist(minstbw_train[sample.ind[i], ])
h <- 1/(1 + exp(-(w %*% v + c)))
hs <- ifelse(h > 0.5, 1, 0)
vr <- 1/(1 + exp(-(t(w) %*% hs + b)))
hr <- 1/(1 + exp(-(w %*% vr + c)))
dw <- eta * (h%*%t(v) - hr%*%t(vr)) / params[k, "batch_size"]
db <- eta * (v - vr) / params[k, "batch_size"]
dc <- eta * (h - hr) / params[k, "batch_size"]
w <- w + dw
b <- b + db
c <- c + dc
err[t] <- err[t] + sum((v - vr)^2) / params[k, "batch_size"]
}
}
dur_time[k] <- Sys.time() - starting
results[[k]] <- err
}
dur_time
results
batch_size <- c(1000)
m <- 784
n <- c(20)
eta <- c(0.01)
niter <- c(10)
params <- expand.grid(batch_size, n, eta, niter)
names(params) <- c("batch_size", "n", "eta", "niter")
K <- nrow(params)
results <- list()
dur_time <- numeric(K)
w0 <- matrix(runif(m*n, -0.1, 0.1), nrow = n, ncol = m)
b0 <- matrix(runif(m*1, -0.1, 0.1), nrow = m, ncol = 1)
c0 <- matrix(runif(n*1, -0.1, 0.1), nrow = n, ncol = 1)
for (k in 1:K){
w <- w0
b <- b0
c <- c0
starting <- Sys.time()
for (t in 1:params[k, "niter"]){
sample.ind <- sample(1:nrow(minstbw_train),
params[k, "batch_size"])
err <- numeric(params[k, "niter"])
for (i in 1:params[1, "batch_size"]){
v <- unlist(minstbw_train[sample.ind[i], ])
h <- 1/(1 + exp(-(w %*% v + c)))
hs <- ifelse(h > 0.5, 1, 0)
vr <- 1/(1 + exp(-(t(w) %*% hs + b)))
hr <- 1/(1 + exp(-(w %*% vr + c)))
dw <- eta * (h%*%t(v) - hr%*%t(vr)) / params[k, "batch_size"]
db <- eta * (v - vr) / params[k, "batch_size"]
dc <- eta * (h - hr) / params[k, "batch_size"]
w <- w + dw
b <- b + db
c <- c + dc
err[t] <- err[t] + sum((v - vr)^2) / params[k, "batch_size"]
}
}
dur_time[k] <- Sys.time() - starting
results[[k]] <- err
}
dur_time
dur_time[1]
Sys.time() - starting
class(Sys.time() - starting)
class(Sys.time())
class(Sys.time()-1)
class(Sys.time()-(Sys.time() - 1))
class(Sys.time()-Sys.time() - 1)
Sys.time()-Sys.time()
Sys.time()-Sys.time()
Sys.time()-Sys.time()
Sys.time()-Sys.time()
Sys.time()-Sys.time()
Sys.time()-Sys.time()
Sys.time()-Sys.time()
Sys.time()-Sys.time()
Sys.time()-Sys.time()
Sys.time()-Sys.time()
Sys.time()-Sys.time()
Sys.time()-Sys.time()
Sys.time()-Sys.time()
dur_time <- rep(Sys.time()-Sys.time(), K)
dur_time
class(dur_time)
dur_time[[k]] <- Sys.time() - starting
dur_time
dur_time[[1]]
str(Sys.time() - starting)
attr(Sys.time() - starting, "units")
dur_time[[k]] <- list(Sys.time() - starting, attr(Sys.time() - starting, "units"))
list(Sys.time() - starting, attr(Sys.time() - starting, "units"))
results <- list()
dur_time[[k]] <- list(Sys.time() - starting, attr(Sys.time() - starting, "units"))
paste(Sys.time() - starting)
paste(Sys.time() - starting, attr(Sys.time() - starting, "units"))
dur_time[[k]] <- paste(Sys.time() - starting,
attr(Sys.time() - starting, "units"))
dur_time
character()
dur_time[k] <- paste(Sys.time() - starting,
attr(Sys.time() - starting, "units"))
dur_time
batch_size <- c(50, 100, 500, 1000, 2000)
m <- 784
n <- c(5, 10, 20, 50, 100)
eta <- c(0.001, 0.005, 0.01, 0.05, 0.1)
niter <- c(20, 50, 100, 200, 500)
params <- expand.grid(batch_size, n, eta, niter)
params
4^4
batch_size <- c(100, 500, 1000, 2000)
m <- 784
n <- c(10, 20, 50, 100)
eta <- c(0.001, 0.01, 0.1)
niter <- c(50, 100, 200)
params <- expand.grid(batch_size, n, eta, niter)
params
batch_size <- c(100, 500, 1000, 2000)
m <- 784
n <- c(10, 50, 100)
eta <- c(0.001, 0.01, 0.1)
niter <- c(50, 100, 200)
params <- expand.grid(batch_size, n, eta, niter)
batch_size
params
100*900*100*0.4
100*900*100*0.4/3600
100*900*100*9/100/3600
batch_size <- c(100, 500, 1000)
m <- 784
n <- c(10, 50, 100)
eta <- c(0.001, 0.01, 0.1)
niter <- c(50, 100, 150)
params <- expand.grid(batch_size, n, eta, niter)
params
81*500*100*9/100/3600
batch_size <- c(100, 500)
m <- 784
n <- c(10, 50, 100)
eta <- c(0.001, 0.01, 0.1)
niter <- c(100, 150)
params <- expand.grid(batch_size, n, eta, niter)
names(params) <- c("batch_size", "n", "eta", "niter")
params
36*300*125*9/100/3600
